{"version":3,"sources":["api/todoListAPI.ts","utils/error-utils.ts","features/TodoListsList/reducers/todoListsReducer.ts","features/login/reducer/authReducer.ts","app/reducer/appReducer.ts","features/TodoListsList/reducers/tasksReducer.ts","app/store.ts","components/EditableSpan/EditableSpan.tsx","components/AddItemForm/AddItemForm.tsx","features/TodoListsList/TodoList/Task/Task.tsx","features/TodoListsList/TodoList/TodoList.tsx","features/TodoListsList/TodoListsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/login/Login.tsx","image/error404.png","features/404/Error404.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todoListAPI","get","title","post","todoListId","delete","put","taskId","updateTask","authAPI","data","handleServerAppError","dispatch","messages","length","setAppError","setAppStatus","handleServerNetworkError","error","message","initialState","slice","createSlice","name","reducers","removeTodoList","state","action","index","findIndex","tl","id","payload","splice","createTodoList","unshift","filter","entityStatus","updateTodoListTitle","updateTodoListFilter","setTodoLists","map","updateTodoListEntityStatus","clearData","todoListsReducer","reducer","actions","isLoggedIn","setIsLoggedIn","authReducer","status","addingTodoList","isInitialized","abilityToAddTodoList","setIsInitialized","appReducer","removeTask","tasks","t","createTask","model","setTasks","updateTaskEntityStatus","extraReducers","builder","addCase","forEach","tasksReducer","modernizeTask","domainModel","getState","a","task","find","console","warn","apiModel","description","priority","startDate","deadline","res","resultCode","rootReducer","combineReducers","todoLists","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","useAppDispatch","useDispatch","window","EditableSpan","React","memo","props","disabled","changeTitle","useState","editMode","setEditMode","displayedTitle","setDisplayedTitle","TextField","variant","color","value","autoFocus","onBlur","onChange","e","currentTarget","onDoubleClick","AddItemForm","addItem","setTitle","setError","onClickAddItemHandler","trim","size","label","helperText","onKeyPress","key","IconButton","onClick","AddBox","Task","changeTaskStatus","changeTaskTitle","removeTaskFn","useCallback","changeTaskTitleFn","Checkbox","checked","Completed","New","className","style","opacity","Delete","TodoList","todoList","changeTodoListTitle","changeFilter","addTask","demo","useEffect","items","tasksForTodoList","getTaskForTodoList","tasksList","onClickRemoveTodoListHandler","addTaskFn","changeTodoListTitleFn","onClickAllChangeFilterHandler","onClickActiveChangeFilterHandler","onClickCompletedChangeFilterHandler","DeleteForever","Button","margin","TodoListsList","useSelector","deleteTodoList","addTodoList","item","produceTodoList","modernizeTodoListTitle","changeTodoListFilter","deleteTask","produceTask","todoListsComponents","Grid","Paper","elevation","padding","borderRadius","container","spacing","to","Alert","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","type","getFieldProps","touched","FormControlLabel","control","Error404","display","justifyContent","alignItems","marginTop","src","error404","alt","height","width","App","appState","LinearProgress","position","bottom","right","left","AppBar","Toolbar","edge","Menu","Typography","Container","fixed","exact","path","render","from","top","textAlign","CircularProgress","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.e4d31643.chunk.js","sourcesContent":["import axios from \"axios\";\n\n\n// api\nconst instance = axios.create({\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\n    withCredentials: true,\n    headers: {\n        \"api-key\": \"0590a1e8-ea10-4bc4-a086-b475e4beea64\",\n    },\n});\n\nexport const todoListAPI = {\n    getTodoLists() {\n        return instance.get<TodoListType[]>(\"todo-lists\");\n    },\n    createTodolist(title: string) {\n        return instance.post<ResponseType<{ item: TodoListType }>>(\"todo-lists\", {title});\n    },\n    removeTodolist(todoListId: string) {\n        return instance.delete<ResponseType>(`todo-lists/${todoListId}`);\n    },\n    updateTodoListTitle(todoListId: string, title: string) {\n        return instance.put<ResponseType<{ item: TodoListType }>>(`todo-lists/${todoListId}`, {title});\n    },\n    getTasks(todoListId: string) {\n        return instance.get<GetTasksResponse>(`todo-lists/${todoListId}/tasks`);\n    },\n    createTask(todoListId: string, title: string) {\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todoListId}/tasks`, {title});\n    },\n    removeTask(todoListId: string, taskId: string) {\n        return instance.delete<ResponseType>(`todo-lists/${todoListId}/tasks/${taskId}`);\n    },\n    updateTask(todoListId: string, taskId: string, updateTask: UpdateTaskModelType) {\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todoListId}/tasks/${taskId}`, updateTask);\n    },\n};\n\nexport const authAPI = {\n    login(data: LoginType) {\n        return instance.post<ResponseType<{ userId: number }>>(\"auth/login\", data);\n    },\n    me() {\n        return instance.get<ResponseType<AuthMeType>>(\"auth/me\");\n    },\n    logout() {\n        return instance.delete<ResponseType>(\"auth/login\");\n    },\n};\n\n\n// types\nexport enum TaskStatuses {\n    New,\n    InProgress,\n    Completed,\n    Draft,\n}\n\nexport enum TaskPriorities {\n    Low,\n    Middle,\n    Hi,\n    Urgently,\n    Later,\n}\n\nexport type TodoListType = {\n    id: string\n    addedDate: string\n    order: number\n    title: string\n};\n\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n};\n\nexport type UpdateTaskModelType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n};\n\nexport type ResponseType<D = {}> = {\n    data: D\n    resultCode: number\n    messages: string[]\n    fieldsErrors: string[]\n};\n\nexport type AuthMeType = {\n    id: number\n    email: string\n    login: string\n};\n\nexport type LoginType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha?: string\n};\n\ntype GetTasksResponse = {\n    error: string | null\n    totalCount: number\n    items: TaskType[]\n};","import {AppDispatchType} from \"../app/store\";\nimport {ResponseType} from \"../api/todoListAPI\";\nimport {setAppError, setAppStatus} from \"../app/reducer/appReducer\";\n\n// generic function\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: AppDispatchType) => {\n    if (data.messages.length) {\n        dispatch(setAppError(data.messages[0]));\n    } else {\n        dispatch(setAppError(\"Some error occurred\"));\n    }\n    dispatch(setAppStatus(\"failed\"));\n};\n\nexport const handleServerNetworkError = (error: { message: string }, dispatch: AppDispatchType) => {\n    dispatch(setAppError(error.message ? error.message : \"Some error occurred\"));\n    dispatch(setAppStatus(\"failed\"));\n};","import {AppDispatchType} from \"../../../app/store\";\nimport {todoListAPI, TodoListType} from \"../../../api/todoListAPI\";\nimport {abilityToAddTodoList, RequestStatusType, setAppStatus, ThunkType} from \"../../../app/reducer/appReducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/error-utils\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\n\nlet initialState = [] as Array<TodoListDomainType>;\n\nexport const slice = createSlice({\n    name: \"todoLists\",\n    initialState,\n    reducers: {\n        removeTodoList(state, action: PayloadAction<string>) {\n            const index = state.findIndex(tl => tl.id === action.payload);\n            if (index > -1) {\n                state.splice(index, 1);\n            }\n        },\n        createTodoList(state, action: PayloadAction<TodoListType>) {\n            state.unshift({...action.payload, filter: \"all\", entityStatus: \"idle\"});\n        },\n        updateTodoListTitle(state, action: PayloadAction<{ todoListId: string, title: string }>) {\n            const index = state.findIndex(tl => tl.id === action.payload.todoListId);\n            state[index].title = action.payload.title;\n        },\n        updateTodoListFilter(state, action: PayloadAction<{ todoListId: string, filter: FilterValuesType }>) {\n            const index = state.findIndex(tl => tl.id === action.payload.todoListId);\n            state[index].filter = action.payload.filter;\n        },\n        setTodoLists(state, action: PayloadAction<TodoListType[]>) {\n            return action.payload.map((tl) => ({...tl, filter: 'all', entityStatus: \"idle\"}));\n        },\n        updateTodoListEntityStatus(state, action: PayloadAction<{ todoListId: string, entityStatus: RequestStatusType }>) {\n            const index = state.findIndex(tl => tl.id === action.payload.todoListId);\n            state[index].entityStatus = action.payload.entityStatus;\n        },\n        clearData(state) {\n            return state = initialState;\n        },\n    },\n});\n\nexport const todoListsReducer = slice.reducer;\n\nexport const {\n    removeTodoList,\n    createTodoList,\n    clearData,\n    setTodoLists,\n    updateTodoListEntityStatus,\n    updateTodoListFilter,\n    updateTodoListTitle\n} = slice.actions;\n\n\n// thanks\nexport const fetchTodoLists = (): ThunkType => async (dispatch: AppDispatchType) => {\n    try {\n        dispatch(setAppStatus(\"loading\"));\n        let res = await todoListAPI.getTodoLists();\n        dispatch(setTodoLists(res.data));\n        dispatch(setAppStatus(\"idle\"));\n        // res.data.forEach((tl) => {\n        //     dispatch(fetchTask(tl.id));\n        // })\n    } catch (err) {\n        handleServerNetworkError(err, dispatch);\n    }\n};\n\nexport const deleteTodoList = (todoListId: string): ThunkType => async (dispatch: AppDispatchType) => {\n    try {\n        dispatch(setAppStatus(\"loading\"));\n        dispatch(updateTodoListEntityStatus({todoListId, entityStatus: \"loading\"}));\n        let res = await todoListAPI.removeTodolist(todoListId);\n        if (res.data.resultCode === 0) {\n            dispatch(removeTodoList(todoListId));\n            dispatch(setAppStatus(\"idle\"));\n        } else {\n            handleServerAppError(res.data, dispatch);\n        }\n    } catch (err) {\n        handleServerNetworkError(err, dispatch);\n    }\n};\n\nexport const produceTodoList = (title: string): ThunkType => async (dispatch: AppDispatchType) => {\n    try {\n        dispatch(setAppStatus(\"loading\"));\n        dispatch(abilityToAddTodoList(true));\n        let res = await todoListAPI.createTodolist(title);\n        if (res.data.resultCode === 0) {\n            dispatch(createTodoList(res.data.data.item));\n            dispatch(setAppStatus(\"succeeded\"));\n            dispatch(abilityToAddTodoList(false));\n        } else {\n            handleServerAppError(res.data, dispatch);\n        }\n    } catch (err) {\n        handleServerNetworkError(err, dispatch);\n    }\n};\n\nexport const modernizeTodoListTitle = (todoListId: string, title: string): ThunkType =>\n    async (dispatch: AppDispatchType) => {\n        try {\n            dispatch(setAppStatus(\"loading\"));\n            dispatch(updateTodoListEntityStatus({todoListId, entityStatus: \"loading\"}));\n            let res = await todoListAPI.updateTodoListTitle(todoListId, title);\n            if (res.data.resultCode === 0) {\n                dispatch(updateTodoListTitle({todoListId, title}));\n                dispatch(setAppStatus(\"idle\"));\n                dispatch(updateTodoListEntityStatus({todoListId, entityStatus: \"idle\"}));\n            } else {\n                handleServerAppError(res.data, dispatch);\n            }\n        } catch (err) {\n            handleServerNetworkError(err, dispatch);\n        }\n    };\n\n\n// types\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\nexport type TodoListDomainType = TodoListType & {\n    filter: FilterValuesType\n    entityStatus: RequestStatusType\n};","import {authAPI, LoginType} from \"../../../api/todoListAPI\";\nimport {setAppStatus, ThunkType} from \"../../../app/reducer/appReducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/error-utils\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {AppDispatchType} from \"../../../app/store\";\nimport {clearData} from \"../../TodoListsList/reducers/todoListsReducer\";\n\n\nconst initialState = {\n    isLoggedIn: false,\n};\n\nconst slice = createSlice({\n    name: \"auth\",\n    initialState,\n    reducers: {\n        setIsLoggedIn(state, action: PayloadAction<boolean>) {\n            state.isLoggedIn = action.payload;\n        },\n    },\n});\n\nexport const authReducer = slice.reducer;\nexport const {setIsLoggedIn} = slice.actions;\n\n\n// thunks\nexport const login = (data: LoginType): ThunkType => async (dispatch: AppDispatchType) => {\n    try {\n        dispatch(setAppStatus(\"loading\"));\n        let res = await authAPI.login(data);\n        if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedIn(true));\n            dispatch(setAppStatus(\"succeeded\"));\n        } else {\n            handleServerAppError(res.data, dispatch);\n        }\n    } catch (err) {\n        handleServerNetworkError(err, dispatch);\n    }\n};\n\nexport const logout = (): ThunkType => async (dispatch: AppDispatchType) => {\n    try {\n        dispatch(setAppStatus(\"loading\"));\n        let res = await authAPI.logout();\n        if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedIn(false));\n            dispatch(setAppStatus(\"succeeded\"));\n            dispatch(clearData());\n        } else {\n            handleServerAppError(res.data, dispatch);\n        }\n    } catch (err) {\n        handleServerNetworkError(err, dispatch);\n    }\n};","import {AppDispatchType, AppRootStateType} from \"../store\";\nimport {authAPI} from \"../../api/todoListAPI\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {setIsLoggedIn} from \"../../features/login/reducer/authReducer\";\nimport {Action, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\n\nconst initialState = {\n    status: \"idle\",\n    error: null,\n    addingTodoList: false,\n    isInitialized: false,\n} as AppInitialStateType;\n\nconst slice = createSlice({\n    name: \"app\",\n    initialState,\n    reducers: {\n        setAppStatus(state, action: PayloadAction<RequestStatusType>) {\n            state.status = action.payload;\n        },\n        setAppError(state, action: PayloadAction<string | null>) {\n            state.error = action.payload;\n        },\n        abilityToAddTodoList(state, action: PayloadAction<boolean>) {\n            state.addingTodoList = action.payload;\n        },\n        setIsInitialized(state, action: PayloadAction<boolean>) {\n            state.isInitialized = action.payload;\n        },\n    },\n});\n\nexport const appReducer = slice.reducer;\n\nexport const {setAppStatus, setIsInitialized, abilityToAddTodoList, setAppError} = slice.actions;\n\n\n// thunks\nexport const initializeApp = (): ThunkType => async (dispatch: AppDispatchType) => {\n    try {\n        let res = await authAPI.me();\n        if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedIn(true));\n            dispatch(setIsInitialized(true));\n        }\n    } finally {\n        dispatch(setIsInitialized(true));\n    }\n};\n\n\n// types\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\nexport type AppInitialStateType = {\n    status: RequestStatusType\n    error: string | null\n    addingTodoList: boolean\n    isInitialized: boolean\n};\nexport type ThunkType = ThunkAction<void, AppRootStateType, unknown, Action<string>>;\n\n","import {AppDispatchType, AppRootStateType} from \"../../../app/store\";\nimport {TaskStatuses, TaskType, todoListAPI, TaskPriorities, UpdateTaskModelType} from \"../../../api/todoListAPI\";\nimport {RequestStatusType, setAppStatus, ThunkType} from \"../../../app/reducer/appReducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/error-utils\";\nimport {clearData, createTodoList, removeTodoList, setTodoLists, updateTodoListEntityStatus} from \"./todoListsReducer\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\n\nlet initialState = {} as TasksStateType;\n\nconst slice = createSlice({\n    name: \"tasks\",\n    initialState,\n    reducers: {\n        removeTask(state, action: PayloadAction<{taskId: string, todoListId: string}>) {\n            const tasks = state[action.payload.todoListId];\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\n            if (index > -1) {\n                tasks.splice(index, 1);\n            }\n        },\n        createTask(state, action: PayloadAction<TaskType>) {\n            state[action.payload.todoListId].unshift({...action.payload, entityStatus: \"idle\"})\n        },\n        updateTask(state, action: PayloadAction<{taskId: string, model: UpdateDomainTaskModelType, todoListId: string}>) {\n            const tasks = state[action.payload.todoListId];\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\n            if (index > -1) {\n                tasks[index] = {...tasks[index], ...action.payload.model};\n            }\n        },\n        setTasks(state, action: PayloadAction<{todoListId: string, tasks: TaskType[]}>) {\n            state[action.payload.todoListId] = action.payload.tasks.map(t => ({...t, entityStatus: \"idle\"}));\n        },\n        updateTaskEntityStatus(state, action: PayloadAction<{todoListId: string, taskId: string, entityStatus: RequestStatusType}>) {\n            const tasks = state[action.payload.todoListId];\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\n            if (index > -1) {\n                tasks[index].entityStatus = action.payload.entityStatus;\n            }\n        },\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(createTodoList, (state, action) => {\n            state[action.payload.id] = [];\n        })\n            .addCase(removeTodoList, (state, action) => {\n            delete state[action.payload];\n        })\n            .addCase(setTodoLists, (state, action) => {\n            action.payload.forEach(tl => state[tl.id] = []);\n        })\n            .addCase(clearData, (state) => {\n            return state = initialState;\n        })\n    },\n});\n\nexport const tasksReducer = slice.reducer;\nexport const {removeTask, createTask, setTasks, updateTask, updateTaskEntityStatus} = slice.actions;\n\n\n// thanks\nexport const fetchTask = (todoListId: string): ThunkType => async (dispatch: AppDispatchType) => {\n    try {\n        dispatch(setAppStatus(\"loading\"));\n        let res = await todoListAPI.getTasks(todoListId);\n        dispatch(setTasks({todoListId, tasks: res.data.items}));\n        dispatch(setAppStatus(\"idle\"));\n    } catch (err) {\n        handleServerNetworkError(err, dispatch);\n    }\n};\n\nexport const deleteTask = (taskId: string, todoListId: string): ThunkType => async (dispatch: AppDispatchType) => {\n    try {\n        dispatch(setAppStatus(\"loading\"));\n        dispatch(updateTaskEntityStatus({todoListId, taskId, entityStatus: \"loading\"}));\n        let res = await todoListAPI.removeTask(todoListId, taskId);\n        if (res.data.resultCode === 0) {\n            dispatch(removeTask({taskId, todoListId}));\n            dispatch(setAppStatus(\"idle\"));\n        } else {\n            handleServerAppError(res.data, dispatch);\n        }\n    } catch (err) {\n        handleServerNetworkError(err, dispatch);\n    }\n};\n\nexport const produceTask = (todoListId: string, title: string): ThunkType => async (dispatch: AppDispatchType) => {\n    try {\n        dispatch(setAppStatus(\"loading\"));\n        dispatch(updateTodoListEntityStatus({todoListId, entityStatus: \"loading\"}));\n        let res = await todoListAPI.createTask(todoListId, title);\n        if (res.data.resultCode === 0) {\n            dispatch(createTask(res.data.data.item));\n            dispatch(setAppStatus(\"idle\"));\n            dispatch(updateTodoListEntityStatus({todoListId, entityStatus: \"idle\"}));\n        } else {\n            handleServerAppError(res.data, dispatch);\n        }\n    } catch (err) {\n        handleServerNetworkError(err, dispatch);\n    }\n};\n\nexport const modernizeTask = (todoListId: string, taskId: string, domainModel: UpdateDomainTaskModelType): ThunkType =>\n    async (dispatch: AppDispatchType, getState: () => AppRootStateType) => {\n        try {\n            dispatch(setAppStatus(\"loading\"));\n            dispatch(updateTaskEntityStatus({todoListId, taskId, entityStatus: \"loading\"}));\n            const task = getState().tasks[todoListId].find(t => t.id === taskId);\n            if (!task) {\n                // throw new Error(\"task not found in the state\");\n                console.warn(\"task not found in the state\");\n                dispatch(setAppStatus(\"idle\"));\n                return;\n            }\n            const apiModel: UpdateTaskModelType = {\n                status: task.status,\n                description: task.description,\n                title: task.title,\n                priority: task.priority,\n                startDate: task.startDate,\n                deadline: task.deadline,\n                ...domainModel,\n            };\n            let res = await todoListAPI.updateTask(todoListId, taskId, apiModel);\n            if (res.data.resultCode === 0) {\n                dispatch(updateTask({taskId, model: domainModel, todoListId}));\n                dispatch(setAppStatus(\"idle\"));\n                dispatch(updateTaskEntityStatus({todoListId, taskId, entityStatus: \"idle\"}));\n            } else {\n                handleServerAppError(res.data, dispatch);\n            }\n        } catch (err) {\n            handleServerNetworkError(err, dispatch);\n        }\n    };\n\n\n// types\nexport type TaskDomainType = TaskType & {\n    entityStatus: RequestStatusType\n};\nexport type TasksStateType = {\n    [key: string]: TaskDomainType[]\n};\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n};\n\n\n\n\n","import {tasksReducer} from \"../features/TodoListsList/reducers/tasksReducer\";\nimport {todoListsReducer} from \"../features/TodoListsList/reducers/todoListsReducer\";\nimport {combineReducers} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport {appReducer} from \"./reducer/appReducer\";\nimport {authReducer} from \"../features/login/reducer/authReducer\";\nimport {configureStore} from \"@reduxjs/toolkit\";\nimport {useDispatch} from \"react-redux\";\n\n\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todoLists: todoListsReducer,\n    app: appReducer,\n    auth: authReducer,\n});\n\n\nexport const store = configureStore({\n    reducer: rootReducer,\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk),\n});\nexport const useAppDispatch = () => useDispatch<AppDispatchType>();\n\n\nexport type RootReducerType = typeof rootReducer;\nexport type AppDispatchType = typeof store.dispatch;\nexport type AppRootStateType = ReturnType<RootReducerType>;\n\n\n// @ts-ignore\nwindow.store = store;\n\n","import React, {ChangeEvent, useState} from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\n\n\nexport const EditableSpan: React.FC<EditableSpanPropsType> = React.memo((props) => {\n\n    const {\n        title,\n        disabled,\n        changeTitle,\n    } = props;\n\n    const [editMode, setEditMode] = useState<boolean>(false);\n    const [displayedTitle, setDisplayedTitle] = useState(title);\n\n    const onEditMode = () => setEditMode(true);\n    const offEditMode = () => {\n        setEditMode(false);\n        changeTitle(displayedTitle);\n    };\n\n    const onChangeItemHandler = (e: ChangeEvent<HTMLInputElement>) => setDisplayedTitle(e.currentTarget.value);\n\n    return (\n        editMode\n            ? <TextField\n                variant={\"standard\"}\n                color={\"primary\"}\n                value={displayedTitle}\n                autoFocus\n                disabled={disabled}\n                onBlur={offEditMode}\n                onChange={onChangeItemHandler}\n            />\n            : <span onDoubleClick={onEditMode}>{title}</span>\n    );\n});\n\n\n// types\nexport type EditableSpanPropsType = {\n    title: string\n    changeTitle: (title: string) => void\n    disabled: boolean\n};","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport TextField from \"@material-ui/core/TextField\";\nimport {AddBox} from \"@material-ui/icons\";\n\n\nexport const AddItemForm: React.FC<AddItemFormPropsType> = React.memo((props) => {\n\n    const {\n        addItem,\n        disabled,\n    } = props;\n\n    const [title, setTitle] = useState('');\n    const [error, setError] = useState<boolean>(false);\n\n    const onClickAddItemHandler = () => {\n        if (title.trim()) {\n            addItem(title);\n        } else {\n            setError(true);\n        }\n        setTitle('');\n    };\n\n    const onChangeItemHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value);\n        setError(false);\n    };\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") {\n            onClickAddItemHandler();\n        }\n    };\n\n    return (\n        <div>\n            <TextField\n                size={\"small\"}\n                label={\"Add new task ...\"}\n                helperText={error && \"Required title!\"}\n                error={error}\n                variant={\"outlined\"}\n                value={title}\n                onChange={onChangeItemHandler}\n                onKeyPress={onKeyPressHandler}\n                disabled={disabled}\n            />\n            <IconButton color={error ? \"secondary\" : \"primary\"} onClick={onClickAddItemHandler} disabled={disabled}>\n                <AddBox/>\n            </IconButton>\n        </div>\n    );\n});\n\n\n// types\nexport type AddItemFormPropsType = {\n    addItem: (title: string) => void\n    disabled?: boolean\n};","import React, {ChangeEvent, useCallback} from \"react\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\nimport {Delete} from \"@material-ui/icons\";\nimport {TaskStatuses} from \"../../../../api/todoListAPI\";\nimport {TaskDomainType} from \"../../reducers/tasksReducer\";\n\n\nexport const Task: React.FC<TaskPropsType> = React.memo((props) => {\n\n    const {\n        changeTaskStatus,\n        changeTaskTitle,\n        removeTask,\n        task,\n        todoListId,\n    } = props;\n\n    const removeTaskFn = useCallback(\n        () => removeTask(task.id, todoListId),\n        [removeTask, task.id, todoListId]);\n\n    const onChengStatusHandler = (e: ChangeEvent<HTMLInputElement>) =>\n        changeTaskStatus(task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, todoListId);\n\n    const changeTaskTitleFn = useCallback(\n        (title: string) => changeTaskTitle(task.id, title, todoListId),\n        [changeTaskTitle, task.id, todoListId]);\n\n    return (\n        <div key={task.id}>\n            <Checkbox\n                color={\"default\"}\n                checked={task.status === TaskStatuses.Completed}\n                onChange={onChengStatusHandler}\n                disabled={task.entityStatus === \"loading\"}\n            />\n            <span className={task.status === TaskStatuses.Completed ? \"is-done\" : ''}>\n                    <EditableSpan\n                        title={task.title}\n                        changeTitle={changeTaskTitleFn}\n                        disabled={task.entityStatus === \"loading\"}\n                    />\n                    </span>\n            <IconButton onClick={removeTaskFn} style={{opacity: \".7\"}} disabled={task.entityStatus === \"loading\"}>\n                <Delete/>\n            </IconButton>\n        </div>\n    );\n});\n\n\n// types\nexport type TaskPropsType = {\n    todoListId: string\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todoListId: string) => void\n    changeTaskTitle: (taskId: string, title: string, todoListId: string) => void\n    removeTask: (taskId: string, todoListId: string) => void\n    task: TaskDomainType\n};","import React, {useCallback, useEffect} from \"react\";\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\nimport {Button, IconButton} from \"@material-ui/core\";\nimport {Task} from \"./Task/Task\";\nimport {TaskStatuses} from \"../../../api/todoListAPI\";\nimport {FilterValuesType, TodoListDomainType} from \"../reducers/todoListsReducer\";\nimport {fetchTask, TaskDomainType} from \"../reducers/tasksReducer\";\nimport {DeleteForever} from \"@material-ui/icons\";\nimport {AppDispatchType, useAppDispatch} from \"../../../app/store\";\n\n\nexport const TodoList: React.FC<TodoListPropsType> = React.memo((props) => {\n\n    const {\n        todoList,\n        changeTaskTitle,\n        changeTaskStatus,\n        changeTodoListTitle,\n        removeTodoList,\n        removeTask,\n        changeFilter,\n        tasks,\n        addTask,\n        demo,\n    } = props;\n\n    const {\n        id,\n        title,\n        filter,\n        entityStatus,\n    } = todoList;\n\n    const dispatch: AppDispatchType = useAppDispatch();\n\n    useEffect(() => {\n        if (demo) {\n            return;\n        }\n        dispatch(fetchTask(id));\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const getTaskForTodoList = () => {\n        switch (filter) {\n            case \"active\":\n                return tasks.filter(task => task.status === TaskStatuses.New);\n            case \"completed\":\n                return tasks.filter(task => task.status === TaskStatuses.Completed);\n            default:\n                return tasks;\n        }\n    };\n\n    let tasksForTodoList = getTaskForTodoList();\n    if (filter === \"active\") {\n        tasksForTodoList = tasks.filter(t => t.status === TaskStatuses.New);\n    }\n    if (filter === \"completed\") {\n        tasksForTodoList = tasks.filter(t => t.status === TaskStatuses.Completed);\n    }\n\n    const tasksList = tasksForTodoList.map((t: TaskDomainType) => <Task\n        changeTaskStatus={changeTaskStatus}\n        changeTaskTitle={changeTaskTitle}\n        removeTask={removeTask}\n        todoListId={id}\n        task={t}\n        key={t.id}\n    />);\n\n    const onClickRemoveTodoListHandler = useCallback(\n        () => removeTodoList(id),\n        [removeTodoList, id]);\n    const addTaskFn = useCallback((title: string) => addTask(title, id),\n        [addTask, id]);\n    const changeTodoListTitleFn = useCallback(\n        (title: string) => changeTodoListTitle(id, title),\n        [changeTodoListTitle, id]);\n    const onClickAllChangeFilterHandler = useCallback(\n        () => changeFilter(id, \"all\"),\n        [changeFilter, id]);\n    const onClickActiveChangeFilterHandler = useCallback(\n        () => changeFilter(id, \"active\"),\n        [changeFilter, id]);\n    const onClickCompletedChangeFilterHandler = useCallback(\n        () => changeFilter(id, \"completed\"),\n        [changeFilter, id]);\n\n\n    return (\n        <div>\n            <h3>\n                <EditableSpan title={title} changeTitle={changeTodoListTitleFn} disabled={entityStatus === \"loading\"}/>\n                <IconButton\n                    onClick={onClickRemoveTodoListHandler}\n                    color={\"secondary\"}\n                    size={\"medium\"}\n                    disabled={entityStatus === \"loading\"}>\n                    <DeleteForever/>\n                </IconButton>\n            </h3>\n            <AddItemForm addItem={addTaskFn} disabled={entityStatus === \"loading\"}/>\n            <div>{tasksList}</div>\n            <div>\n                <Button\n                    style={{margin: \"3px\"}}\n                    size={\"small\"}\n                    variant={filter === \"all\" ? \"contained\" : \"outlined\"}\n                    color={filter === \"all\" ? \"default\" : \"default\"}\n                    onClick={onClickAllChangeFilterHandler}>All</Button>\n                <Button\n                    style={{margin: \"3px\"}}\n                    size={\"small\"}\n                    variant={filter === \"active\" ? \"contained\" : \"outlined\"}\n                    color={filter === \"active\" ? \"primary\" : \"default\"}\n                    onClick={onClickActiveChangeFilterHandler}>Active</Button>\n                <Button\n                    style={{margin: \"3px\"}}\n                    size={\"small\"}\n                    variant={filter === \"completed\" ? \"contained\" : \"outlined\"}\n                    color={filter === \"completed\" ? \"primary\" : \"default\"}\n                    onClick={onClickCompletedChangeFilterHandler}>Completed</Button>\n            </div>\n        </div>\n    );\n});\n\n\n// types\nexport type TodoListPropsType = {\n    todoList: TodoListDomainType\n    tasks: TaskDomainType[]\n    addTask: (title: string, todoListId: string) => void\n    removeTask: (taskId: string, todoListId: string) => void\n    changeFilter: (todoListId: string, filter: FilterValuesType) => void\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todoListId: string) => void\n    removeTodoList: (todoListId: string) => void\n    changeTaskTitle: (taskId: string, title: string, todoListId: string) => void\n    changeTodoListTitle: (todoListId: string, title: string) => void\n    demo?: boolean\n};\n\n\n","import React, {useCallback, useEffect} from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {AppDispatchType, AppRootStateType, useAppDispatch} from \"../../app/store\";\nimport {\n    produceTodoList,\n    fetchTodoLists,\n    FilterValuesType,\n    TodoListDomainType,\n    modernizeTodoListTitle,\n    updateTodoListFilter, deleteTodoList\n} from \"./reducers/todoListsReducer\";\nimport {produceTask, TasksStateType, modernizeTask, deleteTask} from \"./reducers/tasksReducer\";\nimport {TaskStatuses} from \"../../api/todoListAPI\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {TodoList} from \"./TodoList/TodoList\";\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\nimport {Redirect} from \"react-router-dom\";\n\n\nexport const TodoListsList: React.FC<TodoListsListPropsType> = React.memo((props) => {\n\n    const {\n        disabled,\n        demo = false,\n    } = props;\n\n    const todoLists = useSelector<AppRootStateType, Array<TodoListDomainType>>(state => state.todoLists);\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\n\n    const dispatch: AppDispatchType = useAppDispatch();\n\n    useEffect(() => {\n        if (demo || !isLoggedIn) {\n            return;\n        }\n        dispatch(fetchTodoLists());\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const removeTodoList = useCallback((todoListId: string) => {\n        dispatch(deleteTodoList(todoListId));\n    }, [dispatch]);\n    const addTodoList = useCallback((title: string) => {\n        dispatch(produceTodoList(title));\n    }, [dispatch]);\n    const changeTodoListTitle = useCallback((todoListId: string, title: string) => {\n        dispatch(modernizeTodoListTitle(todoListId, title));\n    }, [dispatch]);\n    const changeTodoListFilter = useCallback((todoListId: string, filter: FilterValuesType) => {\n        dispatch(updateTodoListFilter({todoListId, filter}));\n    }, [dispatch]);\n\n    const removeTask = useCallback((taskId: string, todoListId: string) => {\n        dispatch(deleteTask(taskId, todoListId));\n    }, [dispatch]);\n    const addTask = useCallback((title: string, todoListId: string) => {\n        dispatch(produceTask(todoListId, title));\n    }, [dispatch]);\n    const changeTaskStatus = useCallback((taskId: string, status: TaskStatuses, todoListId: string) => {\n        dispatch(modernizeTask(todoListId, taskId, {status}));\n    }, [dispatch]);\n    const changeTaskTitle = useCallback((taskId: string, title: string, todoListId: string) => {\n        dispatch(modernizeTask(todoListId, taskId, {title}));\n    }, [dispatch]);\n\n    const todoListsComponents = todoLists.map(tl => {\n            let tasksForTodoList = tasks[tl.id]\n            return (\n                <Grid item key={tl.id}>\n                    <Paper elevation={7} style={{padding: \"20px\", borderRadius: \"10px\"}}>\n                        <TodoList\n                            todoList={tl}\n                            demo={demo}\n                            removeTask={removeTask}\n                            addTask={addTask}\n                            changeFilter={changeTodoListFilter}\n                            changeTaskStatus={changeTaskStatus}\n                            tasks={tasksForTodoList}\n                            removeTodoList={removeTodoList}\n                            changeTaskTitle={changeTaskTitle}\n                            changeTodoListTitle={changeTodoListTitle}\n                        />\n                    </Paper>\n                </Grid>\n            );\n        }\n    );\n\n    if (!isLoggedIn) {\n        return <Redirect to={\"/login\"}/>\n    }\n\n    return (\n        <>\n            <Grid container style={{padding: \"20px 10px\"}}>\n                <AddItemForm addItem={addTodoList} disabled={disabled}/>\n            </Grid>\n            <Grid container spacing={3}>\n                {todoListsComponents}\n            </Grid>\n        </>\n    );\n});\n\n\n// types\ntype TodoListsListPropsType = {\n    disabled: boolean\n    demo?: boolean\n};","import React from \"react\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert, {AlertProps} from \"@material-ui/lab/Alert\";\nimport {useSelector} from \"react-redux\";\nimport {AppDispatchType, AppRootStateType, useAppDispatch} from \"../../app/store\";\nimport {setAppError} from \"../../app/reducer/appReducer\";\n\n\nfunction Alert(props: AlertProps) {\n    return (\n        <MuiAlert elevation={6} variant=\"filled\" {...props} />\n    );\n}\n\n\nexport const ErrorSnackbar: React.FC = React.memo(() => {\n\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\n    const dispatch: AppDispatchType = useAppDispatch();\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n        dispatch(setAppError(null));\n    }\n\n    const isOpen = error !== null;\n\n    return (\n        <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\">\n                {error}\n            </Alert>\n        </Snackbar>\n    );\n});","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {Redirect} from \"react-router-dom\";\nimport {Dispatch} from \"redux\";\nimport {login} from \"./reducer/authReducer\";\n\nexport const Login: React.FC = React.memo(() => {\n\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\n    const dispatch: Dispatch<any> = useDispatch();\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false,\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = \"Required\";\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = \"Invalid email address\";\n            }\n            if (!values.password) {\n                errors.password = \"Required\";\n            } else if (values.password.length < 5) {\n                errors.password = \"Invalid password, minimum length 5 characters\";\n            } else if (values.password.length > 20) {\n                errors.password = \"Invalid password, maximum length 20 characters\";\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            dispatch(login(values));\n            formik.resetForm();\n        },\n    });\n\n    if (isLoggedIn) {\n        return <Redirect to={'/'}/>\n    }\n\n    return (\n        <Grid container justify=\"center\">\n            <Grid item xs={4}>\n                <form onSubmit={formik.handleSubmit}>\n                    <FormControl>\n                        <FormLabel>\n                            <p>To log in get registered\n                                <a href={\"https://social-network.samuraijs.com/\"} target={\"_blank\"} rel=\"noreferrer\">\n                                    here\n                                </a>\n                            </p>\n                            <p>or use common test account credentials:</p>\n                            <p>Email: free@samuraijs.com</p>\n                            <p>Password: free</p>\n                        </FormLabel>\n                        <FormGroup>\n                            <TextField\n                                label=\"Email\"\n                                margin=\"normal\"\n                                type=\"email\"\n                                {...formik.getFieldProps(\"email\")}\n                            />\n                            {formik.touched.email && formik.errors.email\n                            && <div style={{color: \"red\"}}>{formik.errors.email}</div>}\n                            <TextField\n                                label=\"Password\"\n                                margin=\"normal\"\n                                type=\"password\"\n                                {...formik.getFieldProps(\"password\")}\n                            />\n                            {formik.touched.password && formik.errors.password\n                            && <div style={{color: \"red\"}}>{formik.errors.password}</div>}\n                            <FormControlLabel label={\"Remember me\"} control={\n                                <Checkbox\n                                    {...formik.getFieldProps(\"rememberMe\")}\n                                    value={formik.values.rememberMe}\n                                />\n                            }/>\n                            <Button type={\"submit\"} variant={\"contained\"} color={\"primary\"}>Login</Button>\n                        </FormGroup>\n                    </FormControl>\n                </form>\n            </Grid>\n        </Grid>\n    );\n});\n\n\n// types\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n};\n\n\n","export default __webpack_public_path__ + \"static/media/error404.dd34e759.png\";","import React from \"react\";\nimport error404 from \"../../image/error404.png\"\n\nexport const Error404: React.FC = React.memo(() => {\n    return (\n        <div style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\", marginTop: \"50px\"}}>\n            <img\n                src={error404}\n                alt=\"error 404\"\n                style={{height: \"100%\", width: \"auto\"}}\n            />\n        </div>\n    );\n});","import React, {useEffect} from 'react';\nimport './style/App.css';\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Button from \"@material-ui/core/Button\";\nimport Container from \"@material-ui/core/Container\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport {Menu} from \"@material-ui/icons\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport {TodoListsList} from \"../features/TodoListsList/TodoListsList\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./store\";\nimport {AppInitialStateType, initializeApp} from \"./reducer/appReducer\";\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\nimport {Login} from \"../features/login/Login\";\nimport {Switch, Route, Redirect} from \"react-router-dom\";\nimport {Error404} from \"../features/404/Error404\";\nimport {Dispatch} from \"redux\";\nimport {logout} from \"../features/login/reducer/authReducer\";\n\n\nexport const App: React.FC<AppPropsType> = (props) => {\n\n    const {\n        demo = false,\n    } = props;\n\n    const appState = useSelector<AppRootStateType, AppInitialStateType>(state => state.app);\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized);\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\n\n    const dispatch: Dispatch<any> = useDispatch();\n\n    useEffect(() => {\n        if (!demo) {\n            dispatch(initializeApp())\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const logoutHandler = () => {\n        dispatch(logout());\n    };\n\n    if (!isInitialized) {\n        return (\n            <div\n                style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n                <CircularProgress/>\n            </div>\n        );\n    }\n\n\n    return (\n        <div className={\"App\"}>\n            {\n                appState.status === \"loading\"\n                && <LinearProgress color={\"secondary\"}\n                                   style={{position: \"fixed\", bottom: 0, height: \"7px\", right: 0, left: 0,}}/>\n            }\n            <AppBar position={\"static\"}>\n                <Toolbar style={{justifyContent: \"space-between\"}}>\n                    <IconButton edge={\"start\"} color={\"inherit\"}>\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant={\"h6\"}>\n                        TodoLists\n                    </Typography>\n                    {\n                        isLoggedIn\n                        && <Button variant={\"outlined\"} color={\"inherit\"} onClick={logoutHandler}>Logout</Button>\n                    }\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <Switch>\n                    <Route exact path={\"/\"}\n                           render={\n                               () => <TodoListsList disabled={appState.addingTodoList} demo={demo}/>\n                           }\n                    />\n                    <Route path={\"/login\"} render={() => <Login/>}/>\n                    <Route path={\"/404\"} render={() => <Error404/>}/>\n                    <Redirect from={\"*\"} to={\"/404\"}/>\n                </Switch>\n            </Container>\n            <ErrorSnackbar/>\n        </div>\n    );\n};\n\n\n// types\ntype AppPropsType = {\n    demo?: boolean\n};\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport {App} from \"./app/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {store} from \"./app/store\";\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}