{"version":3,"sources":["api/todoListAPI.ts","utils/error-utils.ts","features/TodoListsList/reducers/todoListsReducer.ts","features/login/reducer/authReducer.ts","app/reducer/appReducer.ts","features/TodoListsList/reducers/tasksReducer.ts","app/store.ts","components/EditableSpan/EditableSpan.tsx","components/AddItemForm/AddItemForm.tsx","features/TodoListsList/TodoList/Task/Task.tsx","features/TodoListsList/TodoList/TodoList.tsx","features/TodoListsList/TodoListsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/login/Login.tsx","features/404/Error404.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todoListAPI","get","title","post","todoListId","delete","put","taskId","updateTask","authAPI","data","handleServerAppError","dispatch","messages","length","setAppError","setAppStatus","handleServerNetworkError","error","message","fetchTodoLists","createAsyncThunk","param","a","rejectWithValue","res","deleteTodoList","updateTodoListEntityStatus","entityStatus","resultCode","produceTodoList","abilityToAddTodoList","item","modernizeTodoListTitle","slice","createSlice","name","initialState","reducers","updateTodoListFilter","state","action","index","findIndex","tl","id","payload","filter","clearData","extraReducers","builder","addCase","fulfilled","map","splice","unshift","todoListsReducer","reducer","actions","login","errors","fieldsErrors","undefined","logout","isLoggedIn","setIsLoggedIn","authReducer","initializeApp","status","addingTodoList","isInitialized","setIsInitialized","appReducer","fetchTask","tasks","items","deleteTask","updateTaskEntityStatus","produceTask","modernizeTask","getState","task","find","t","apiModel","description","priority","startDate","deadline","model","forEach","tasksReducer","rootReducer","combineReducers","todoLists","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","useAppDispatch","useDispatch","window","EditableSpan","React","memo","props","disabled","changeTitle","useState","editMode","setEditMode","displayedTitle","setDisplayedTitle","TextField","variant","color","value","autoFocus","onBlur","onChange","e","currentTarget","onDoubleClick","AddItemForm","addItem","setTitle","setError","onClickAddItemHandler","trim","size","label","helperText","onKeyPress","key","IconButton","onClick","AddBox","Task","changeTaskStatus","changeTaskTitle","removeTask","removeTaskFn","useCallback","changeTaskTitleFn","Checkbox","checked","Completed","New","className","style","opacity","Delete","TodoList","todoList","changeTodoListTitle","removeTodoList","changeFilter","addTask","demo","useEffect","tasksForTodoList","getTaskForTodoList","tasksList","onClickRemoveTodoListHandler","addTaskFn","changeTodoListTitleFn","onClickAllChangeFilterHandler","onClickActiveChangeFilterHandler","onClickCompletedChangeFilterHandler","DeleteForever","Button","margin","TodoListsList","useSelector","addTodoList","changeTodoListFilter","todoListsComponents","Grid","Paper","elevation","padding","borderRadius","container","spacing","to","Alert","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","rejected","match","setFieldError","field","justify","xs","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","type","getFieldProps","touched","FormControlLabel","control","Error404","from","display","justifyContent","alignItems","marginTop","height","width","textAlign","fontSize","fontWeight","textTransform","App","appState","LinearProgress","position","bottom","right","left","AppBar","Toolbar","edge","Menu","Typography","Container","fixed","exact","path","render","top","CircularProgress","Boolean","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.0b7ffeb5.chunk.js","sourcesContent":["import axios from \"axios\";\n\n\n// api\nconst instance = axios.create({\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\n    withCredentials: true,\n    headers: {\n        \"api-key\": \"0590a1e8-ea10-4bc4-a086-b475e4beea64\",\n    },\n});\n\nexport const todoListAPI = {\n    getTodoLists() {\n        return instance.get<TodoListType[]>(\"todo-lists\");\n    },\n    createTodolist(title: string) {\n        return instance.post<ResponseType<{ item: TodoListType }>>(\"todo-lists\", {title});\n    },\n    removeTodolist(todoListId: string) {\n        return instance.delete<ResponseType>(`todo-lists/${todoListId}`);\n    },\n    updateTodoListTitle(todoListId: string, title: string) {\n        return instance.put<ResponseType<{ item: TodoListType }>>(`todo-lists/${todoListId}`, {title});\n    },\n    getTasks(todoListId: string) {\n        return instance.get<GetTasksResponse>(`todo-lists/${todoListId}/tasks`);\n    },\n    createTask(todoListId: string, title: string) {\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todoListId}/tasks`, {title});\n    },\n    removeTask(todoListId: string, taskId: string) {\n        return instance.delete<ResponseType>(`todo-lists/${todoListId}/tasks/${taskId}`);\n    },\n    updateTask(todoListId: string, taskId: string, updateTask: UpdateTaskModelType) {\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todoListId}/tasks/${taskId}`, updateTask);\n    },\n};\n\nexport const authAPI = {\n    login(data: LoginType) {\n        return instance.post<ResponseType<{ userId: number }>>(\"auth/login\", data);\n    },\n    me() {\n        return instance.get<ResponseType<AuthMeType>>(\"auth/me\");\n    },\n    logout() {\n        return instance.delete<ResponseType>(\"auth/login\");\n    },\n};\n\n\n// types\nexport enum TaskStatuses {\n    New,\n    InProgress,\n    Completed,\n    Draft,\n}\n\nexport enum TaskPriorities {\n    Low,\n    Middle,\n    Hi,\n    Urgently,\n    Later,\n}\n\nexport type TodoListType = {\n    id: string\n    addedDate: string\n    order: number\n    title: string\n};\n\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n};\n\nexport type UpdateTaskModelType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n};\n\nexport type ResponseType<D = {}> = {\n    data: D\n    resultCode: number\n    messages: string[]\n    fieldsErrors?: FieldsErrorsType[]\n};\n\nexport type FieldsErrorsType = {\n    field: string\n    error: string\n}\n\nexport type AuthMeType = {\n    id: number\n    email: string\n    login: string\n};\n\nexport type LoginType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha?: string\n};\n\ntype GetTasksResponse = {\n    error: string | null\n    totalCount: number\n    items: TaskType[]\n};","import {AppDispatchType} from \"../app/store\";\nimport {ResponseType} from \"../api/todoListAPI\";\nimport {setAppError, setAppStatus} from \"../app/reducer/appReducer\";\n\n// generic function\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: AppDispatchType) => {\n    if (data.messages.length) {\n        dispatch(setAppError(data.messages[0]));\n    } else {\n        dispatch(setAppError(\"Some error occurred\"));\n    }\n    dispatch(setAppStatus(\"failed\"));\n};\n\nexport const handleServerNetworkError = (error: { message: string }, dispatch: AppDispatchType) => {\n    dispatch(setAppError(error.message ? error.message : \"Some error occurred\"));\n    dispatch(setAppStatus(\"failed\"));\n};","import {todoListAPI, TodoListType} from \"../../../api/todoListAPI\";\nimport {abilityToAddTodoList, RequestStatusType, setAppStatus} from \"../../../app/reducer/appReducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/error-utils\";\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\n\nexport const fetchTodoLists = createAsyncThunk(\"todoLists/fetchTodoLists\",\n    async (param, {\n        dispatch,\n        rejectWithValue\n    }) => {\n        try {\n            dispatch(setAppStatus(\"loading\"));\n            const res = await todoListAPI.getTodoLists();\n            dispatch(setAppStatus(\"idle\"));\n            return res.data;\n        } catch (err) {\n            handleServerNetworkError(err, dispatch);\n            return rejectWithValue(null);\n        }\n    });\nexport const deleteTodoList = createAsyncThunk(\"todoLists/deleteTodoList\",\n    async (todoListId: string, {\n        dispatch,\n        rejectWithValue\n    }) => {\n        try {\n            dispatch(setAppStatus(\"loading\"));\n            dispatch(updateTodoListEntityStatus({todoListId, entityStatus: \"loading\"}));\n            let res = await todoListAPI.removeTodolist(todoListId);\n            if (res.data.resultCode === 0) {\n                dispatch(setAppStatus(\"idle\"));\n                return todoListId;\n            } else {\n                handleServerAppError(res.data, dispatch);\n                return rejectWithValue(null);\n            }\n        } catch (err) {\n            handleServerNetworkError(err, dispatch);\n            return rejectWithValue(null);\n        }\n    });\nexport const produceTodoList = createAsyncThunk(\"todoLists/produceTodoList\",\n    async (title: string, {\n        dispatch,\n        rejectWithValue\n    }) => {\n        try {\n            dispatch(setAppStatus(\"loading\"));\n            dispatch(abilityToAddTodoList(true));\n            let res = await todoListAPI.createTodolist(title);\n            if (res.data.resultCode === 0) {\n                dispatch(setAppStatus(\"succeeded\"));\n                dispatch(abilityToAddTodoList(false));\n                return res.data.data.item;\n            } else {\n                handleServerAppError(res.data, dispatch);\n                return rejectWithValue(null);\n            }\n        } catch (err) {\n            handleServerNetworkError(err, dispatch);\n            return rejectWithValue(null);\n        }\n    });\nexport const modernizeTodoListTitle = createAsyncThunk(\"todoLists/modernizeTodoListTitle\",\n    async (param: { todoListId: string, title: string }, {\n        dispatch,\n        rejectWithValue\n    }) => {\n        try {\n            dispatch(setAppStatus(\"loading\"));\n            dispatch(updateTodoListEntityStatus({todoListId: param.todoListId, entityStatus: \"loading\"}));\n            let res = await todoListAPI.updateTodoListTitle(param.todoListId, param.title);\n            if (res.data.resultCode === 0) {\n                dispatch(setAppStatus(\"idle\"));\n                dispatch(updateTodoListEntityStatus({todoListId: param.todoListId, entityStatus: \"idle\"}));\n                return param;\n            } else {\n                handleServerAppError(res.data, dispatch);\n                return rejectWithValue(null);\n            }\n        } catch (err) {\n            handleServerNetworkError(err, dispatch);\n            return rejectWithValue(null);\n        }\n    });\n\n\nexport const slice = createSlice({\n    name: \"todoLists\",\n    initialState: [] as Array<TodoListDomainType>,\n    reducers: {\n        updateTodoListFilter(state, action: PayloadAction<{ todoListId: string, filter: FilterValuesType }>) {\n            const index = state.findIndex(tl => tl.id === action.payload.todoListId);\n            state[index].filter = action.payload.filter;\n        },\n        updateTodoListEntityStatus(state, action: PayloadAction<{\n            todoListId: string,\n            entityStatus: RequestStatusType\n        }>) {\n            const index = state.findIndex(tl => tl.id === action.payload.todoListId);\n            state[index].entityStatus = action.payload.entityStatus;\n        },\n        clearData(state) {\n            return state = [] as Array<TodoListDomainType>;\n        },\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(fetchTodoLists.fulfilled, (state, action) => {\n                return action.payload.map((tl) => ({...tl, filter: 'all', entityStatus: \"idle\"}));\n            })\n            .addCase(deleteTodoList.fulfilled, (state, action) => {\n                const index = state.findIndex(tl => tl.id === action.payload);\n                if (index > -1) {\n                    state.splice(index, 1);\n                }\n            })\n            .addCase(produceTodoList.fulfilled, (state, action) => {\n                state.unshift({...action.payload, filter: \"all\", entityStatus: \"idle\"});\n            })\n            .addCase(modernizeTodoListTitle.fulfilled, (state, action) => {\n                const index = state.findIndex(tl => tl.id === action.payload.todoListId);\n                state[index].title = action.payload.title;\n            })\n    },\n});\n\nexport const todoListsReducer = slice.reducer;\n\nexport const {clearData, updateTodoListEntityStatus, updateTodoListFilter,} = slice.actions;\n\n\n// types\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\nexport type TodoListDomainType = TodoListType & {\n    filter: FilterValuesType\n    entityStatus: RequestStatusType\n};","import {authAPI, FieldsErrorsType, LoginType} from \"../../../api/todoListAPI\";\nimport {setAppStatus} from \"../../../app/reducer/appReducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/error-utils\";\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {clearData} from \"../../TodoListsList/reducers/todoListsReducer\";\nimport {AxiosError} from \"axios\";\n\n\nexport const login = createAsyncThunk<undefined, LoginType, {\n    rejectValue: { errors: string[], fieldsErrors?: FieldsErrorsType[] }\n}>(\"auth/login\", async (data, {dispatch, rejectWithValue}) => {\n    try {\n        dispatch(setAppStatus(\"loading\"));\n        const res = await authAPI.login(data);\n        if (res.data.resultCode === 0) {\n            dispatch(setAppStatus(\"succeeded\"));\n            return;\n        } else {\n            handleServerAppError(res.data, dispatch);\n            return rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors});\n        }\n    } catch (err) {\n        const error: AxiosError = err;\n        handleServerNetworkError(error, dispatch);\n        return rejectWithValue({errors: [error.message], fieldsErrors: undefined});\n    }\n});\n\nexport const logout = createAsyncThunk(\"auth/logout\", async (data, {dispatch, rejectWithValue}) => {\n    try {\n        dispatch(setAppStatus(\"loading\"));\n        const res = await authAPI.logout();\n        if (res.data.resultCode === 0) {\n            dispatch(setAppStatus(\"succeeded\"));\n            dispatch(clearData());\n            return;\n        } else {\n            handleServerAppError(res.data, dispatch);\n            return rejectWithValue({});\n        }\n    } catch (error) {\n        handleServerNetworkError(error, dispatch);\n        return rejectWithValue({});\n    }\n});\n\nconst slice = createSlice({\n    name: \"auth\",\n    initialState: {\n        isLoggedIn: false,\n    },\n    reducers: {\n        setIsLoggedIn(state, action: PayloadAction<boolean>) {\n            state.isLoggedIn = action.payload;\n        },\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(login.fulfilled, (state) => {\n                state.isLoggedIn = true;\n            })\n            .addCase(logout.fulfilled, (state) => {\n                state.isLoggedIn = false;\n            })\n    },\n});\n\nexport const authReducer = slice.reducer;\nexport const {setIsLoggedIn} = slice.actions;","import {AppRootStateType} from \"../store\";\nimport {authAPI} from \"../../api/todoListAPI\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {setIsLoggedIn} from \"../../features/login/reducer/authReducer\";\nimport {Action, createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\n\nexport const initializeApp = createAsyncThunk(\"app/initializeApp\", async (data, {dispatch}) => {\n    try {\n        let res = await authAPI.me();\n        if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedIn(true));\n        }\n    } finally {\n\n    }\n});\n\nconst slice = createSlice({\n    name: \"app\",\n    initialState: {\n        status: \"idle\",\n        error: null,\n        addingTodoList: false,\n        isInitialized: false,\n    } as AppInitialStateType,\n    reducers: {\n        setAppStatus(state, action: PayloadAction<RequestStatusType>) {\n            state.status = action.payload;\n        },\n        setAppError(state, action: PayloadAction<string | null>) {\n            state.error = action.payload;\n        },\n        abilityToAddTodoList(state, action: PayloadAction<boolean>) {\n            state.addingTodoList = action.payload;\n        },\n        setIsInitialized(state, action: PayloadAction<boolean>) {\n            state.isInitialized = action.payload;\n        },\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(initializeApp.fulfilled, (state) => {\n                state.isInitialized = true;\n            })\n    },\n});\n\nexport const appReducer = slice.reducer;\n\nexport const {setAppStatus, abilityToAddTodoList, setAppError} = slice.actions;\n\n\n// types\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\nexport type AppInitialStateType = {\n    status: RequestStatusType\n    error: string | null\n    addingTodoList: boolean\n    isInitialized: boolean\n};\nexport type ThunkType = ThunkAction<void, AppRootStateType, unknown, Action<string>>;\n\n","import {AppRootStateType} from \"../../../app/store\";\nimport {TaskPriorities, TaskStatuses, TaskType, todoListAPI, UpdateTaskModelType} from \"../../../api/todoListAPI\";\nimport {RequestStatusType, setAppStatus} from \"../../../app/reducer/appReducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/error-utils\";\nimport {\n    clearData,\n    deleteTodoList,\n    fetchTodoLists,\n    produceTodoList,\n    updateTodoListEntityStatus\n} from \"./todoListsReducer\";\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\n\nexport const fetchTask = createAsyncThunk('tasks/fetchTask', async (todoListId: string, {dispatch}) => {\n    try {\n        dispatch(setAppStatus(\"loading\"));\n        const res = await todoListAPI.getTasks(todoListId);\n        dispatch(setAppStatus(\"idle\"));\n        return {todoListId, tasks: res.data.items};\n    } catch (err) {\n        handleServerNetworkError(err, dispatch);\n    }\n});\n\nexport const deleteTask = createAsyncThunk(\"tasks/deleteTask\", async (param: { taskId: string, todoListId: string }, {dispatch}) => {\n    try {\n        dispatch(setAppStatus(\"loading\"));\n        dispatch(updateTaskEntityStatus({todoListId: param.todoListId, taskId: param.taskId, entityStatus: \"loading\"}));\n        const res = await todoListAPI.removeTask(param.todoListId, param.taskId);\n        if (res.data.resultCode === 0) {\n            dispatch(setAppStatus(\"idle\"));\n            return {todoListId: param.todoListId, taskId: param.taskId};\n        } else {\n            handleServerAppError(res.data, dispatch);\n        }\n    } catch (err) {\n        handleServerNetworkError(err, dispatch);\n    }\n});\n\nexport const produceTask = createAsyncThunk(\"tasks/produceTask\", async (\n    param: { todoListId: string, title: string },\n    {dispatch, rejectWithValue}\n) => {\n    try {\n        dispatch(setAppStatus(\"loading\"));\n        dispatch(updateTodoListEntityStatus({todoListId: param.todoListId, entityStatus: \"loading\"}));\n        let res = await todoListAPI.createTask(param.todoListId, param.title);\n        if (res.data.resultCode === 0) {\n            dispatch(setAppStatus(\"idle\"));\n            dispatch(updateTodoListEntityStatus({todoListId: param.todoListId, entityStatus: \"idle\"}));\n            return res.data.data.item;\n        } else {\n            handleServerAppError(res.data, dispatch);\n            return rejectWithValue(null);\n        }\n    } catch (err) {\n        handleServerNetworkError(err, dispatch);\n        return rejectWithValue(null);\n    }\n});\n\nexport const modernizeTask = createAsyncThunk(\"tasks/modernizeTask\", async (\n    param: { todoListId: string, taskId: string, model: UpdateDomainTaskModelType },\n    {dispatch, rejectWithValue, getState}) => {\n    try {\n        dispatch(setAppStatus(\"loading\"));\n        dispatch(updateTaskEntityStatus({todoListId: param.todoListId, taskId: param.taskId, entityStatus: \"loading\"}));\n        const state = getState() as AppRootStateType;\n        const task = state.tasks[param.todoListId].find(t => t.id === param.taskId);\n        if (!task) {\n            dispatch(setAppStatus(\"idle\"));\n            return rejectWithValue(\"task not found in the state\");\n        }\n        const apiModel: UpdateTaskModelType = {\n            status: task.status,\n            description: task.description,\n            title: task.title,\n            priority: task.priority,\n            startDate: task.startDate,\n            deadline: task.deadline,\n            ...param.model,\n        };\n        const res = await todoListAPI.updateTask(param.todoListId, param.taskId, apiModel);\n        if (res.data.resultCode === 0) {\n            dispatch(setAppStatus(\"idle\"));\n            dispatch(updateTaskEntityStatus({\n                todoListId: param.todoListId,\n                taskId: param.taskId,\n                entityStatus: \"idle\"\n            }));\n            return {taskId: param.taskId, model: param.model, todoListId: param.todoListId};\n        } else {\n            handleServerAppError(res.data, dispatch);\n            return rejectWithValue(null);\n        }\n    } catch (err) {\n        handleServerNetworkError(err, dispatch);\n        return rejectWithValue(null);\n    }\n});\n\n\nconst slice = createSlice({\n    name: \"tasks\",\n    initialState: {} as TasksStateType,\n    reducers: {\n        updateTaskEntityStatus(state, action: PayloadAction<{ todoListId: string, taskId: string, entityStatus: RequestStatusType }>) {\n            const tasks = state[action.payload.todoListId];\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\n            if (index > -1) {\n                tasks[index].entityStatus = action.payload.entityStatus;\n            }\n        },\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(produceTodoList.fulfilled, (state, action) => {\n                state[action.payload.id] = [];\n            })\n            .addCase(deleteTodoList.fulfilled, (state, action) => {\n                delete state[action.payload];\n            })\n            .addCase(fetchTodoLists.fulfilled, (state, action) => {\n                action.payload.forEach(tl => state[tl.id] = []);\n            })\n            .addCase(clearData, (state) => {\n                return state = {} as TasksStateType;\n            })\n            .addCase(fetchTask.fulfilled, (state, action) => {\n                if (action.payload) {\n                    state[action.payload.todoListId] = action.payload.tasks.map(t => ({...t, entityStatus: \"idle\"}));\n                }\n            })\n            .addCase(deleteTask.fulfilled, (state, action) => {\n                if (action.payload) {\n                    const tasks = state[action.payload.todoListId];\n                    // @ts-ignore\n                    const index = tasks.findIndex(t => t.id === action.payload.taskId);\n                    if (index > -1) {\n                        tasks.splice(index, 1);\n                    }\n                }\n            })\n            .addCase(produceTask.fulfilled, (state, action) => {\n                state[action.payload.todoListId].unshift({...action.payload, entityStatus: \"idle\"})\n            })\n            .addCase(modernizeTask.fulfilled, (state, action) => {\n                const tasks = state[action.payload.todoListId];\n                const index = tasks.findIndex(t => t.id === action.payload.taskId);\n                if (index > -1) {\n                    tasks[index] = {...tasks[index], ...action.payload.model};\n                }\n            })\n    },\n});\n\nexport const tasksReducer = slice.reducer;\nexport const {updateTaskEntityStatus} = slice.actions;\n\n\n// types\nexport type TaskDomainType = TaskType & {\n    entityStatus: RequestStatusType\n};\nexport type TasksStateType = {\n    [key: string]: TaskDomainType[]\n};\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n};\n\n\n\n\n","import {tasksReducer} from \"../features/TodoListsList/reducers/tasksReducer\";\nimport {todoListsReducer} from \"../features/TodoListsList/reducers/todoListsReducer\";\nimport {combineReducers} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport {appReducer} from \"./reducer/appReducer\";\nimport {authReducer} from \"../features/login/reducer/authReducer\";\nimport {configureStore} from \"@reduxjs/toolkit\";\nimport {useDispatch} from \"react-redux\";\n\n\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todoLists: todoListsReducer,\n    app: appReducer,\n    auth: authReducer,\n});\n\n\nexport const store = configureStore({\n    reducer: rootReducer,\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk),\n});\nexport const useAppDispatch = () => useDispatch<AppDispatchType>();\n\n\nexport type RootReducerType = typeof rootReducer;\nexport type AppDispatchType = typeof store.dispatch;\nexport type AppRootStateType = ReturnType<RootReducerType>;\n\n\n// @ts-ignore\nwindow.store = store;\n\n","import React, {ChangeEvent, useState} from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\n\n\nexport const EditableSpan: React.FC<EditableSpanPropsType> = React.memo((props) => {\n\n    const {\n        title,\n        disabled,\n        changeTitle,\n    } = props;\n\n    const [editMode, setEditMode] = useState<boolean>(false);\n    const [displayedTitle, setDisplayedTitle] = useState(title);\n\n    const onEditMode = () => setEditMode(true);\n    const offEditMode = () => {\n        setEditMode(false);\n        changeTitle(displayedTitle);\n    };\n\n    const onChangeItemHandler = (e: ChangeEvent<HTMLInputElement>) => setDisplayedTitle(e.currentTarget.value);\n\n    return (\n        editMode\n            ? <TextField\n                variant={\"standard\"}\n                color={\"primary\"}\n                value={displayedTitle}\n                autoFocus\n                disabled={disabled}\n                onBlur={offEditMode}\n                onChange={onChangeItemHandler}\n            />\n            : <span onDoubleClick={onEditMode}>{title}</span>\n    );\n});\n\n\n// types\nexport type EditableSpanPropsType = {\n    title: string\n    changeTitle: (title: string) => void\n    disabled: boolean\n};","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport TextField from \"@material-ui/core/TextField\";\nimport {AddBox} from \"@material-ui/icons\";\n\n\nexport const AddItemForm: React.FC<AddItemFormPropsType> = React.memo((props) => {\n\n    const {\n        addItem,\n        disabled,\n    } = props;\n\n    const [title, setTitle] = useState('');\n    const [error, setError] = useState<boolean>(false);\n\n    const onClickAddItemHandler = () => {\n        if (title.trim()) {\n            addItem(title);\n        } else {\n            setError(true);\n        }\n        setTitle('');\n    };\n\n    const onChangeItemHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value);\n        setError(false);\n    };\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") {\n            onClickAddItemHandler();\n        }\n    };\n\n    return (\n        <div>\n            <TextField\n                size={\"small\"}\n                label={\"Add new task ...\"}\n                helperText={error && \"Required title!\"}\n                error={error}\n                variant={\"outlined\"}\n                value={title}\n                onChange={onChangeItemHandler}\n                onKeyPress={onKeyPressHandler}\n                disabled={disabled}\n            />\n            <IconButton color={error ? \"secondary\" : \"primary\"} onClick={onClickAddItemHandler} disabled={disabled}>\n                <AddBox/>\n            </IconButton>\n        </div>\n    );\n});\n\n\n// types\nexport type AddItemFormPropsType = {\n    addItem: (title: string) => void\n    disabled?: boolean\n};","import React, {ChangeEvent, useCallback} from \"react\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\nimport {Delete} from \"@material-ui/icons\";\nimport {TaskStatuses} from \"../../../../api/todoListAPI\";\nimport {TaskDomainType} from \"../../reducers/tasksReducer\";\n\n\nexport const Task: React.FC<TaskPropsType> = React.memo((props) => {\n\n    const {\n        changeTaskStatus,\n        changeTaskTitle,\n        removeTask,\n        task,\n        todoListId,\n    } = props;\n\n    const removeTaskFn = useCallback(\n        () => removeTask(task.id, todoListId),\n        [removeTask, task.id, todoListId]);\n\n    const onChengStatusHandler = (e: ChangeEvent<HTMLInputElement>) =>\n        changeTaskStatus(task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, todoListId);\n\n    const changeTaskTitleFn = useCallback(\n        (title: string) => changeTaskTitle(task.id, title, todoListId),\n        [changeTaskTitle, task.id, todoListId]);\n\n    return (\n        <div key={task.id}>\n            <Checkbox\n                color={\"default\"}\n                checked={task.status === TaskStatuses.Completed}\n                onChange={onChengStatusHandler}\n                disabled={task.entityStatus === \"loading\"}\n            />\n            <span className={task.status === TaskStatuses.Completed ? \"is-done\" : ''}>\n                    <EditableSpan\n                        title={task.title}\n                        changeTitle={changeTaskTitleFn}\n                        disabled={task.entityStatus === \"loading\"}\n                    />\n                    </span>\n            <IconButton onClick={removeTaskFn} style={{opacity: \".7\"}} disabled={task.entityStatus === \"loading\"}>\n                <Delete/>\n            </IconButton>\n        </div>\n    );\n});\n\n\n// types\nexport type TaskPropsType = {\n    todoListId: string\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todoListId: string) => void\n    changeTaskTitle: (taskId: string, title: string, todoListId: string) => void\n    removeTask: (taskId: string, todoListId: string) => void\n    task: TaskDomainType\n};","import React, {useCallback, useEffect} from \"react\";\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\nimport {Button, IconButton} from \"@material-ui/core\";\nimport {Task} from \"./Task/Task\";\nimport {TaskStatuses} from \"../../../api/todoListAPI\";\nimport {FilterValuesType, TodoListDomainType} from \"../reducers/todoListsReducer\";\nimport {fetchTask, TaskDomainType} from \"../reducers/tasksReducer\";\nimport {DeleteForever} from \"@material-ui/icons\";\nimport {useAppDispatch} from \"../../../app/store\";\n\n\nexport const TodoList: React.FC<TodoListPropsType> = React.memo((props) => {\n\n    const {\n        todoList,\n        changeTaskTitle,\n        changeTaskStatus,\n        changeTodoListTitle,\n        removeTodoList,\n        removeTask,\n        changeFilter,\n        tasks,\n        addTask,\n        demo,\n    } = props;\n\n    const {\n        id,\n        title,\n        filter,\n        entityStatus,\n    } = todoList;\n\n    const dispatch = useAppDispatch();\n\n    useEffect(() => {\n        if (demo) {\n            return;\n        }\n        dispatch(fetchTask(id));\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const getTaskForTodoList = () => {\n        switch (filter) {\n            case \"active\":\n                return tasks.filter(task => task.status === TaskStatuses.New);\n            case \"completed\":\n                return tasks.filter(task => task.status === TaskStatuses.Completed);\n            default:\n                return tasks;\n        }\n    };\n\n    let tasksForTodoList = getTaskForTodoList();\n    if (filter === \"active\") {\n        tasksForTodoList = tasks.filter(t => t.status === TaskStatuses.New);\n    }\n    if (filter === \"completed\") {\n        tasksForTodoList = tasks.filter(t => t.status === TaskStatuses.Completed);\n    }\n\n    const tasksList = tasksForTodoList.map((t: TaskDomainType) => <Task\n        changeTaskStatus={changeTaskStatus}\n        changeTaskTitle={changeTaskTitle}\n        removeTask={removeTask}\n        todoListId={id}\n        task={t}\n        key={t.id}\n    />);\n\n    const onClickRemoveTodoListHandler = useCallback(\n        () => removeTodoList(id),\n        [removeTodoList, id]);\n    const addTaskFn = useCallback((title: string) => addTask(title, id),\n        [addTask, id]);\n    const changeTodoListTitleFn = useCallback(\n        (title: string) => changeTodoListTitle(id, title),\n        [changeTodoListTitle, id]);\n    const onClickAllChangeFilterHandler = useCallback(\n        () => changeFilter(id, \"all\"),\n        [changeFilter, id]);\n    const onClickActiveChangeFilterHandler = useCallback(\n        () => changeFilter(id, \"active\"),\n        [changeFilter, id]);\n    const onClickCompletedChangeFilterHandler = useCallback(\n        () => changeFilter(id, \"completed\"),\n        [changeFilter, id]);\n\n\n    return (\n        <div>\n            <h3>\n                <EditableSpan title={title} changeTitle={changeTodoListTitleFn} disabled={entityStatus === \"loading\"}/>\n                <IconButton\n                    onClick={onClickRemoveTodoListHandler}\n                    color={\"secondary\"}\n                    size={\"medium\"}\n                    disabled={entityStatus === \"loading\"}>\n                    <DeleteForever/>\n                </IconButton>\n            </h3>\n            <AddItemForm addItem={addTaskFn} disabled={entityStatus === \"loading\"}/>\n            <div>{tasksList}</div>\n            <div>\n                <Button\n                    style={{margin: \"3px\"}}\n                    size={\"small\"}\n                    variant={filter === \"all\" ? \"contained\" : \"outlined\"}\n                    color={filter === \"all\" ? \"default\" : \"default\"}\n                    onClick={onClickAllChangeFilterHandler}>All</Button>\n                <Button\n                    style={{margin: \"3px\"}}\n                    size={\"small\"}\n                    variant={filter === \"active\" ? \"contained\" : \"outlined\"}\n                    color={filter === \"active\" ? \"primary\" : \"default\"}\n                    onClick={onClickActiveChangeFilterHandler}>Active</Button>\n                <Button\n                    style={{margin: \"3px\"}}\n                    size={\"small\"}\n                    variant={filter === \"completed\" ? \"contained\" : \"outlined\"}\n                    color={filter === \"completed\" ? \"primary\" : \"default\"}\n                    onClick={onClickCompletedChangeFilterHandler}>Completed</Button>\n            </div>\n        </div>\n    );\n});\n\n\n// types\nexport type TodoListPropsType = {\n    todoList: TodoListDomainType\n    tasks: TaskDomainType[]\n    addTask: (title: string, todoListId: string) => void\n    removeTask: (taskId: string, todoListId: string) => void\n    changeFilter: (todoListId: string, filter: FilterValuesType) => void\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todoListId: string) => void\n    removeTodoList: (todoListId: string) => void\n    changeTaskTitle: (taskId: string, title: string, todoListId: string) => void\n    changeTodoListTitle: (todoListId: string, title: string) => void\n    demo?: boolean\n};\n\n\n","import React, {useCallback, useEffect} from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {AppRootStateType, useAppDispatch} from \"../../app/store\";\nimport {\n    produceTodoList,\n    fetchTodoLists,\n    FilterValuesType,\n    TodoListDomainType,\n    modernizeTodoListTitle,\n    updateTodoListFilter, deleteTodoList\n} from \"./reducers/todoListsReducer\";\nimport {produceTask, TasksStateType, modernizeTask, deleteTask} from \"./reducers/tasksReducer\";\nimport {TaskStatuses} from \"../../api/todoListAPI\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {TodoList} from \"./TodoList/TodoList\";\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\nimport {Redirect} from \"react-router-dom\";\n\n\nexport const TodoListsList: React.FC<TodoListsListPropsType> = React.memo((props) => {\n\n    const {\n        disabled,\n        demo = false,\n    } = props;\n\n    const todoLists = useSelector<AppRootStateType, Array<TodoListDomainType>>(state => state.todoLists);\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\n\n    const dispatch = useAppDispatch();\n\n    useEffect(() => {\n        if (demo || !isLoggedIn) {\n            return;\n        }\n        dispatch(fetchTodoLists());\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const removeTodoList = useCallback((todoListId: string) => {\n        dispatch(deleteTodoList(todoListId));\n    }, [dispatch]);\n    const addTodoList = useCallback((title: string) => {\n        dispatch(produceTodoList(title));\n    }, [dispatch]);\n    const changeTodoListTitle = useCallback((todoListId: string, title: string) => {\n        dispatch(modernizeTodoListTitle({todoListId, title}));\n    }, [dispatch]);\n    const changeTodoListFilter = useCallback((todoListId: string, filter: FilterValuesType) => {\n        dispatch(updateTodoListFilter({todoListId, filter}));\n    }, [dispatch]);\n\n    const removeTask = useCallback((taskId: string, todoListId: string) => {\n        dispatch(deleteTask({taskId, todoListId}));\n    }, [dispatch]);\n    const addTask = useCallback((title: string, todoListId: string) => {\n        dispatch(produceTask({todoListId, title}));\n    }, [dispatch]);\n    const changeTaskStatus = useCallback((taskId: string, status: TaskStatuses, todoListId: string) => {\n        dispatch(modernizeTask({todoListId, taskId, model: {status}}));\n    }, [dispatch]);\n    const changeTaskTitle = useCallback((taskId: string, title: string, todoListId: string) => {\n        dispatch(modernizeTask({todoListId, taskId, model: {title}}));\n    }, [dispatch]);\n\n    const todoListsComponents = todoLists.map(tl => {\n            let tasksForTodoList = tasks[tl.id]\n            return (\n                <Grid item key={tl.id}>\n                    <Paper elevation={7} style={{padding: \"20px\", borderRadius: \"10px\"}}>\n                        <TodoList\n                            todoList={tl}\n                            demo={demo}\n                            removeTask={removeTask}\n                            addTask={addTask}\n                            changeFilter={changeTodoListFilter}\n                            changeTaskStatus={changeTaskStatus}\n                            tasks={tasksForTodoList}\n                            removeTodoList={removeTodoList}\n                            changeTaskTitle={changeTaskTitle}\n                            changeTodoListTitle={changeTodoListTitle}\n                        />\n                    </Paper>\n                </Grid>\n            );\n        }\n    );\n\n    if (!isLoggedIn) {\n        return <Redirect to={\"/login\"}/>\n    }\n\n    return (\n        <>\n            <Grid container style={{padding: \"20px 10px\"}}>\n                <AddItemForm addItem={addTodoList} disabled={disabled}/>\n            </Grid>\n            <Grid container spacing={3}>\n                {todoListsComponents}\n            </Grid>\n        </>\n    );\n});\n\n\n// types\ntype TodoListsListPropsType = {\n    disabled: boolean\n    demo?: boolean\n};","import React from \"react\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert, {AlertProps} from \"@material-ui/lab/Alert\";\nimport {useSelector} from \"react-redux\";\nimport {AppRootStateType, useAppDispatch} from \"../../app/store\";\nimport {setAppError} from \"../../app/reducer/appReducer\";\n\n\nfunction Alert(props: AlertProps) {\n    return (\n        <MuiAlert elevation={6} variant=\"filled\" {...props} />\n    );\n}\n\n\nexport const ErrorSnackbar: React.FC = React.memo(() => {\n\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\n    const dispatch = useAppDispatch();\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n        dispatch(setAppError(null));\n    }\n\n    const isOpen = error !== null;\n\n    return (\n        <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\">\n                {error}\n            </Alert>\n        </Snackbar>\n    );\n});","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport {FormikHelpers, useFormik} from \"formik\";\nimport {useSelector} from \"react-redux\";\nimport {AppRootStateType, useAppDispatch} from \"../../app/store\";\nimport {Redirect} from \"react-router-dom\";\nimport {login} from \"./reducer/authReducer\";\n\nexport const Login: React.FC = React.memo(() => {\n\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\n    const dispatch = useAppDispatch();\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false,\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = \"Required\";\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = \"Invalid email address\";\n            }\n            if (!values.password) {\n                errors.password = \"Required\";\n            } else if (values.password.length < 4) {\n                errors.password = \"Invalid password, minimum length 4 characters\";\n            } else if (values.password.length > 20) {\n                errors.password = \"Invalid password, maximum length 20 characters\";\n            }\n            return errors;\n        },\n        onSubmit: async (values: FormikValueType, formikHelpers: FormikHelpers<FormikValueType>) => {\n            const action = await dispatch(login(values));\n            if (login.rejected.match(action)) {\n                if (action.payload?.fieldsErrors?.length) {\n                    const error = action.payload.fieldsErrors[0];\n                    formikHelpers.setFieldError(error.field, error.error);\n                }\n            }\n            // formik.resetForm();\n        },\n    });\n\n    if (isLoggedIn) {\n        return <Redirect to={'/'}/>\n    }\n\n    return (\n        <Grid container justify=\"center\">\n            <Grid item xs={4}>\n                <form onSubmit={formik.handleSubmit}>\n                    <FormControl>\n                        <FormLabel>\n                            <p>To log in get registered\n                                <a href={\"https://social-network.samuraijs.com/\"} target={\"_blank\"} rel=\"noreferrer\">\n                                    here\n                                </a>\n                            </p>\n                            <p>or use common test account credentials:</p>\n                            <p>Email: free@samuraijs.com</p>\n                            <p>Password: free</p>\n                        </FormLabel>\n                        <FormGroup>\n                            <TextField\n                                label=\"Email\"\n                                margin=\"normal\"\n                                type=\"email\"\n                                {...formik.getFieldProps(\"email\")}\n                            />\n                            {formik.touched.email && formik.errors.email\n                            && <div style={{color: \"red\"}}>{formik.errors.email}</div>}\n                            <TextField\n                                label=\"Password\"\n                                margin=\"normal\"\n                                type=\"password\"\n                                {...formik.getFieldProps(\"password\")}\n                            />\n                            {formik.touched.password && formik.errors.password\n                            && <div style={{color: \"red\"}}>{formik.errors.password}</div>}\n                            <FormControlLabel label={\"Remember me\"} control={\n                                <Checkbox\n                                    {...formik.getFieldProps(\"rememberMe\")}\n                                    value={formik.values.rememberMe}\n                                />\n                            }/>\n                            <Button type={\"submit\"} variant={\"contained\"} color={\"primary\"}>Login</Button>\n                        </FormGroup>\n                    </FormControl>\n                </form>\n            </Grid>\n        </Grid>\n    );\n});\n\n\n// types\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n};\ntype FormikValueType = {\n    email: string\n    password: string\n    rememberMe: boolean\n};\n\n\n","import React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {Redirect} from \"react-router-dom\";\n\nexport const Error404: React.FC = React.memo(() => {\n\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\n\n    debugger\n\n    if(isLoggedIn) {\n        return <Redirect from={\"/404\"} to={\"/\"}/>\n    }\n\n    return (\n        <div style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\", marginTop: \"50px\"}}>\n            <div style={{height: \"80vh\", width: \"80vm\", textAlign: \"center\"}}>\n                <h1 style={{fontSize: \"20vh\", fontWeight: 700, color: \"red\", textTransform: \"uppercase\"}}>\n                    error 404\n                </h1>\n                <p style={{fontSize: \"2vh\", fontWeight: 500}}>\n                    Oops, something went wrong. We are already looking for a solution to your problem.\n                </p>\n            </div>\n        </div>\n    );\n});","import React, {useEffect} from 'react';\nimport './style/App.css';\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Button from \"@material-ui/core/Button\";\nimport Container from \"@material-ui/core/Container\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport {Menu} from \"@material-ui/icons\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport {TodoListsList} from \"../features/TodoListsList/TodoListsList\";\nimport {useSelector} from \"react-redux\";\nimport {AppRootStateType, useAppDispatch} from \"./store\";\nimport {AppInitialStateType, initializeApp} from \"./reducer/appReducer\";\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\nimport {Login} from \"../features/login/Login\";\nimport {Switch, Route, Redirect} from \"react-router-dom\";\nimport {Error404} from \"../features/404/Error404\";\nimport {logout} from \"../features/login/reducer/authReducer\";\n\n\nexport const App: React.FC<AppPropsType> = (props) => {\n\n    const {\n        demo = false,\n    } = props;\n\n    const appState = useSelector<AppRootStateType, AppInitialStateType>(state => state.app);\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized);\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\n\n    const dispatch = useAppDispatch();\n\n    useEffect(() => {\n        if (!demo) {\n            dispatch(initializeApp())\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const logoutHandler = () => {\n        dispatch(logout());\n    };\n\n    if (!isInitialized) {\n        return (\n            <div\n                style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n                <CircularProgress/>\n            </div>\n        );\n    }\n\n\n    return (\n        <div className={\"App\"}>\n            {\n                appState.status === \"loading\"\n                && <LinearProgress color={\"secondary\"}\n                                   style={{position: \"fixed\", bottom: 0, height: \"7px\", right: 0, left: 0,}}/>\n            }\n            <AppBar position={\"static\"}>\n                <Toolbar style={{justifyContent: \"space-between\"}}>\n                    <IconButton edge={\"start\"} color={\"inherit\"}>\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant={\"h6\"}>\n                        TodoLists\n                    </Typography>\n                    {\n                        isLoggedIn\n                        && <Button variant={\"outlined\"} color={\"inherit\"} onClick={logoutHandler}>Logout</Button>\n                    }\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <Switch>\n                    <Route exact path={\"/\"}\n                           render={\n                               () => <TodoListsList disabled={appState.addingTodoList} demo={demo}/>\n                           }\n                    />\n                    <Route path={\"/login\"} render={() => <Login/>}/>\n                    <Route path={\"/404\"} render={() => <Error404/>}/>\n                    <Redirect from={\"*\"} to={\"/404\"}/>\n                </Switch>\n            </Container>\n            <ErrorSnackbar/>\n        </div>\n    );\n};\n\n\n// types\ntype AppPropsType = {\n    demo?: boolean\n};\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport {App} from \"./app/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {store} from \"./app/store\";\nimport {Provider} from \"react-redux\";\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <App />\n        </HashRouter>\n    </Provider>, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}